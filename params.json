{"name":"Improse","tagline":"PHP5 MVC view library","body":"# Improse\r\nPHP5 View and templating system for MVC projects\r\n\r\nSurprisingly, most MVC frameworks out there get Controllers and Views utterly\r\nwrong. If you've ever worked with one, you'll recognize the following pattern:\r\n\r\n    <?php\r\n\r\n    class SomeController extends BaseController\r\n    {\r\n        public function actionIndex()\r\n        {\r\n            $this->data = new SomeModel;\r\n            $this->render('path/to/template.php', ['data' => $this->data]);\r\n        }\r\n    }\r\n\r\nThis is wrong for a number of reasons, all stemming from formal MVC theory:\r\n\r\n1. The View (which in the above case is actually a template, which is something\r\n   different) is responsible for its own data. Here it is not; the Controller is\r\n   instantiating a model and passing it on to the template/view.\r\n2. The template is acting as the View, which is wrong (they're separate\r\n   concepts).\r\n3. There is now tight coupling between SomeController::indexAction and\r\n   SomeModel, which would only be relevant if the action changes something\r\n   (normally, a `POST` handler).\r\n\r\nImprose is a simple view layer correcting these errors.\r\n\r\n* Homepage: http://monomelodies.github.io/improse/\r\n* Full documentation: http://improse.readthedocs.org/en/latest/\r\n\r\n## Installation\r\n\r\n### Composer (recommended)\r\n\r\nAdd \"monomelodies/improse\" to your `composer.json` requirements:\r\n\r\n    {\r\n        \"require\": {\r\n            \"monomelodies/improse\": \">=0.4\"\r\n        }\r\n    }\r\n\r\n...and run `$ composer update` from your project's root.\r\n\r\n### Manual installation\r\n1. Get the code;\r\n  1. Clone the repository, e.g. from GitHub;\r\n  2. Download the ZIP (e.g. from Github) and extract.\r\n2. Make your project recognize Improse:\r\n  1. Register `/path/to/improse/src` for the namespace `Improse\\\\` in your\r\n     PSR-4 autoloader (recommended);\r\n  2. Alternatively, manually `include` the files you need.\r\n\r\n## Basic usage\r\nFor examples and full explanation, see the documentation.\r\n\r\n### Basic views\r\nAn Improse view is simply an invokable class. The base class also provides a\r\n`__toString` method that invokes-till-it-can-invoke-no-more:\r\n\r\n    <?php\r\n\r\n    use Improse;\r\n\r\n    class View extends Improse\\View\r\n    {\r\n        public function __invoke()\r\n        {\r\n            return '<h1>Hello world!</h1>';\r\n        }\r\n    }\r\n\r\nThen, wherever you need it rendered, simply `__toString` it:\r\n\r\n    <body>\r\n        <!-- assuming $view is an object of the above View class: -->\r\n        <?=$view?>\r\n    </body>\r\n\r\n### Adding templates\r\nEchoing tons of HTML in the invoke method is of course impractical. What most\r\nMVC frameworks erronously call \"the view\" is actually a _template_ (usually\r\nHTML, but could be anything a browser groks).\r\n\r\nInstead of extending the base `View` class (which in practice you'll amost never\r\ndo anyway), extend one of the `Improse\\View\\*` classes.\r\n\r\n    <?php\r\n\r\n    use Improse\\Html;\r\n\r\n    class View extends Html\r\n    {\r\n        protected $template = '/path/to/template.php';\r\n    }\r\n\r\n### Simplifying things\r\nObviously, views not requiring any additional data seem rather superfluous.\r\nIn fact, that's exactly the idea! If your page is _that_ static, you shouldn't\r\nneed a View at all (well, except for headers maybe, but a controller can set\r\nthose too).\r\n\r\nUsing the above example classes, the following three resolves for whatever\r\nrouter you choose to use yield identical results:\r\n\r\n    $page = new View;\r\n    // or (assuming template.php contains that string of HTML)...\r\n    $page = '<h1>Hello world!</h1>';\r\n    // or...\r\n    $page = call_user_func(function() {\r\n        // Using a lambda here is slightly over the top, but it's there to\r\n        // make the point that the view could be anything.\r\n        ob_start();\r\n        include '/path/to/template.php';\r\n        return ob_get_clean();\r\n    });\r\n    // Output:\r\n    echo $page;\r\n\r\nAs you can see, you can mix and match anything, as long as your rendering code\r\nis clear on whether to expect a callable or a string. No need whatsoever to use\r\nImprose views throughout your project!\r\n\r\n### Using an external templating engine\r\n\r\nLet's say you like using Smarty. It's simple enough to integrate:\r\n\r\n    <?php\r\n\r\n    use Improse;\r\n\r\n    class View extends Improse\\View\r\n    {\r\n        public function __invoke(array $__viewdata = [])\r\n        {\r\n            $smarty = new Smarty;\r\n\r\n            // ...Additional Smarty config...\r\n            // ...Add Smarty variables...\r\n\r\n            // Finally, simply return the rendered string:\r\n            return $smarty->fetch('page.tpl');\r\n        }\r\n    }\r\n\r\nSimilar setups can be used for other engines, e.g. Twig.\r\n\r\n## Handling data\r\nSince the whole idea of having a View object is to let it take care of its own\r\ndata, let's show an example of that, too:\r\n\r\n    <?php\r\n\r\n    use Improse\\Html;\r\n\r\n    class View extends Html\r\n    {\r\n        protected $template = '/path/to/template.php';\r\n\r\n        public function __invoke()\r\n        {\r\n            // Obviously, in a real world example you'd be better off storing\r\n            // this in some central config and dependency injecting it...\r\n            $db = new PDO('dsn', 'user', 'pass');\r\n            $stmt = $db->prepare('SELECT * FROM foo WHERE bar = ?');\r\n            $stmt->execute(['value-for-bar']);\r\n            return parent::__invoke([\r\n                'rows' => $stmt->fetchAll(PDO::FETCH_ASSOC),\r\n            ]);\r\n        }\r\n    }\r\n\r\nThe idea is simple: whenever an Improse view is invoked, it optionally receives\r\na hash of key/value pairs with view data. Since the template file itself is\r\ndeclared in a protected member, customizing and extending views is trivial.\r\n\r\n## Using views in views\r\n\r\n### Master templates\r\nMost of the time, a regular HTML page being rendered will use a master template\r\nof sorts containg headers, menus and footers. To achieve this, simply define a\r\ncentral view containing this template, decide on a variable name to use for your\r\ninjected page-specific view and have your controller/router inject it where\r\nneeded:\r\n\r\n    <?php\r\n\r\n    use Improse\\Html;\r\n\r\n    class MasterView extends Html\r\n    {\r\n        protected $template = '/path/to/template.php';\r\n    }\r\n\r\n...and in `template.php`:\r\n\r\n    <html>\r\n        <...other html...>\r\n        <?=$content?>\r\n    </html>\r\n\r\n...and wherever you decide a page is being rendered:\r\n\r\n    <?php\r\n\r\n    $view = new View(['some' => 'data']);\r\n    $template = new MasterView(['content' => $view]);\r\n\r\nDepending on what other framework(s) you use, you should factor this away to a\r\ncentral place. E.g., using `Reroute` for your routing, you could group all page\r\nroutes in an `html` group and inject the view into a master centrally. This way,\r\nboth the views as well as the templates are completely reusable as snippets (see\r\nbelow), and the template injection is handled where it should (by the front\r\ncontroller, which is after all where it is decided that the user is requesting\r\na full blown HTML page).\r\n\r\n### Snippets\r\nOften, you will also want to define \"snippets\" of HTML for the rendering of\r\nrecurring partials. Often you can do a simple `include` on the PHP file in\r\nquestion, but if you need/like your data to be encapsulated, or need to use\r\nsome external templating engine, Improse has you covered:\r\n\r\n    <?php use Improse\\Html ?>\r\n    <ul>\r\n    <?php foreach ($list as $item) { ?>\r\n        <?=(new Html('/path/to/my/list/item.php'))(compact('item'))?>\r\n    <?php } ?>\r\n    </ul>\r\n\r\nA good strategy here is to load the item view in the page view and pass it in a\r\nvariable. This can define all 'global' variables that every instance of the\r\nsnippet needs. Then, when rendering, just pass the instance-specific variables\r\nin when invoking.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}